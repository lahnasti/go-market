// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	models "github.com/lahnasti/go-market/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddProduct provides a mock function with given fields: _a0
func (_m *Repository) AddProduct(_a0 models.Product) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for AddProduct")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Product) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Product) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(models.Product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProducts provides a mock function with given fields:
func (_m *Repository) DeleteProducts() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DeleteProducts")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields:
func (_m *Repository) GetAllProducts() ([]models.Product, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Product, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Product); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Product)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductByID provides a mock function with given fields: _a0
func (_m *Repository) GetProductByID(_a0 int) (models.Product, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 models.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.Product, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) models.Product); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.Product)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProductPurchases provides a mock function with given fields: _a0
func (_m *Repository) GetProductPurchases(_a0 int) ([]models.Purchase, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetProductPurchases")
	}

	var r0 []models.Purchase
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Purchase, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Purchase); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Purchase)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: _a0
func (_m *Repository) GetUserProfile(_a0 int) (models.User, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (models.User, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) models.User); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPurchases provides a mock function with given fields: _a0
func (_m *Repository) GetUserPurchases(_a0 int) ([]models.Purchase, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPurchases")
	}

	var r0 []models.Purchase
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]models.Purchase, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(int) []models.Purchase); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Purchase)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsProductUnique provides a mock function with given fields: _a0
func (_m *Repository) IsProductUnique(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsProductUnique")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsUsernameUnique provides a mock function with given fields: _a0
func (_m *Repository) IsUsernameUnique(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsUsernameUnique")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: _a0, _a1
func (_m *Repository) LoginUser(_a0 string, _a1 string) (int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(string, string) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MakePurchase provides a mock function with given fields: _a0
func (_m *Repository) MakePurchase(_a0 models.Purchase) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MakePurchase")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(models.Purchase) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.Purchase) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(models.Purchase) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: _a0
func (_m *Repository) RegisterUser(_a0 models.User) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(models.User) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(models.User) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(models.User) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDeleteStatus provides a mock function with given fields: _a0
func (_m *Repository) SetDeleteStatus(_a0 int) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for SetDeleteStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: _a0, _a1
func (_m *Repository) UpdateProduct(_a0 int, _a1 models.Product) (int, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, models.Product) (int, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(int, models.Product) int); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, models.Product) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
